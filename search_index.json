[["index.html", "fwdpy11 recipes 1 Preface", " fwdpy11 recipes Kevin R Thornton 2021-01-17 1 Preface This book provides additional recipes for the fwdpy11 simulation software. The recipes complement examples found in the primary documentation. Some recipes may be repeated here. The book is written using R Markdown. The Python code blocks are executed via reticulate. The book is always current with respect to the current fwdpy11 release. The contents of this book are generated using fwdpy11 version 0.12.0. "],["introduction.html", "2 Introduction 2.1 Key imports", " 2 Introduction 2.1 Key imports The following imports will be used throughout: import fwdpy11 import fp11recipes import numpy as np import seaborn as sns import matplotlib.pyplot as plt The fp11recipes is a small Python module includes with the source code for this book. "],["distributions-of-effect-sizes.html", "3 Distributions of effect sizes", " 3 Distributions of effect sizes "],["genetic-maps-and-recombination.html", "4 Genetic maps and recombination", " 4 Genetic maps and recombination "],["demographic-models-soft-selection-and-discrete-demes.html", "5 Demographic models (soft selection and discrete demes)", " 5 Demographic models (soft selection and discrete demes) "],["extending-fwdpy11-with-c.html", "6 Extending fwdpy11 with C++ 6.1 Building with cmake", " 6 Extending fwdpy11 with C++ 6.1 Building with cmake It is arguably easiest to build extension with cmake. The pybind11 documentation gives instructions on how to do so. The CMakeLists.txt to build the C++ components of the fp11recipes module accompanying this book looks like this: cmake_minimum_required(VERSION 2.8.12) project(fp11recipes_modules) # As of 0.8.0, fwdpy11 # is compiled with the C++14 language # standard (-std=c++14) set(CMAKE_CXX_EXTENSIONS OFF) set(CMAKE_CXX_STANDARD 14) find_package(pybind11) message(STATUS &quot;Found pybind11: ${pybind11_VERSION}&quot;) if(${pybind11_VERSION} VERSION_LESS &#39;2.6.0&#39;) message(FATAL_ERROR &quot;pybind11 version must be &gt;= &#39;2.6.0&#39;&quot;) endif() execute_process(COMMAND python3 -m fwdpy11 --fwdpy11_headers OUTPUT_VARIABLE FP11HEADERS) execute_process(COMMAND python3 -m fwdpy11 --fwdpp_headers OUTPUT_VARIABLE FWDPPHEADERS) find_package(GSL REQUIRED) include_directories(BEFORE ${FP11HEADERS} ${FWDPPHEADERS}) message(STATUS &quot;GSL headers in ${GSL_INCLUDE_DIRS}&quot;) include_directories(BEFORE ${GSL_INCLUDE_DIRS}) set(CMAKE_CXX_FLAGS &quot;${CMAKE_CXX_FLAGS} -Wall&quot;) pybind11_add_module(freqtrackercpp MODULE freqtrackercpp.cc) target_link_libraries(freqtrackercpp PRIVATE GSL::gsl GSL::gslcblas) "]]
